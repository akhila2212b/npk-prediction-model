{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "31522fbb-2e6b-43bd-92f8-c183386f3e4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import ee\n",
    "import geemap\n",
    "import joblib\n",
    "\n",
    "# Load the trained model (this assumes you've saved it as a .pkl file)\n",
    "ensemble_model = joblib.load('ensemble_model.pkl')\n",
    "\n",
    "# Extract individual models from the loaded dictionary\n",
    "rf_base = ensemble_model['rf_base']\n",
    "xgb_base = ensemble_model['xgb_base']\n",
    "lgbm_base = ensemble_model['lgbm_base']\n",
    "rf_meta_model = ensemble_model['rf_meta_model']\n",
    "\n",
    "# Authenticate & initialize GEE\n",
    "try:\n",
    "    ee.Initialize()\n",
    "except Exception as e:\n",
    "    ee.Authenticate()\n",
    "    ee.Initialize()\n",
    "\n",
    "# Function to compute vegetation indices\n",
    "def compute_indices(image):\n",
    "    ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI')\n",
    "    evi = image.expression(\n",
    "        '2.5 * (NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1)',\n",
    "        {\n",
    "            'NIR': image.select('B8'),\n",
    "            'RED': image.select('B4'),\n",
    "            'BLUE': image.select('B2'),\n",
    "        }\n",
    "    ).rename('EVI')\n",
    "    savi = image.expression(\n",
    "        '(1 + L) * (NIR - RED) / (NIR + RED + L)',\n",
    "        {'NIR': image.select('B8'), 'RED': image.select('B4'), 'L': 0.5}\n",
    "    ).rename('SAVI')\n",
    "    ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI')\n",
    "    gndvi = image.normalizedDifference(['B8', 'B3']).rename('GNDVI')\n",
    "\n",
    "    return image.addBands([ndvi, evi, savi, ndwi, gndvi])\n",
    "\n",
    "# Function to get NPK predictions at a given point\n",
    "def get_npk_predictions(lat, lon, start_date, end_date):\n",
    "    point = ee.Geometry.Point(lon, lat)\n",
    "    \n",
    "    # Filter Sentinel-2 imagery within the date range\n",
    "    image_collection = (\n",
    "        ee.ImageCollection('COPERNICUS/S2')\n",
    "        .filterBounds(point)\n",
    "        .filterDate(start_date, end_date)\n",
    "    )\n",
    "\n",
    "    # Check if the image collection has any imagery\n",
    "    if image_collection.size().getInfo() == 0:\n",
    "        return \"No imagery found for the specified date range and location.\"\n",
    "    \n",
    "    # Get the first image from the collection\n",
    "    image = image_collection.first()\n",
    "    \n",
    "    # Compute vegetation indices\n",
    "    image = compute_indices(image)\n",
    "\n",
    "    # Sample the point and extract index values\n",
    "    sample = image.sampleRegions(\n",
    "        collection=ee.FeatureCollection(point),\n",
    "        scale=10\n",
    "    ).first().getInfo()\n",
    "\n",
    "    # Extract the indices (NDVI, EVI, SAVI, NDWI, GNDVI)\n",
    "    indices = {\n",
    "        'NDVI': sample['properties']['NDVI'],\n",
    "        'EVI': sample['properties']['EVI'],\n",
    "        'SAVI': sample['properties']['SAVI'],\n",
    "        'NDWI': sample['properties']['NDWI'],\n",
    "        'GNDVI': sample['properties']['GNDVI']\n",
    "    }\n",
    "\n",
    "    # Prepare the input data for prediction\n",
    "    input_data = [[indices['NDVI'], indices['EVI'], indices['SAVI'], indices['NDWI'], indices['GNDVI']]]\n",
    "\n",
    "    # Predict NPK values using the base models\n",
    "    rf_pred = rf_base.predict(input_data)\n",
    "    xgb_pred = xgb_base.predict(input_data)\n",
    "    lgbm_pred = lgbm_base.predict(input_data)\n",
    "\n",
    "    # Stack the predictions from the base models\n",
    "    stack_input = np.column_stack((rf_pred, xgb_pred, lgbm_pred))\n",
    "\n",
    "    # Use the Random Forest meta-model to make the final prediction\n",
    "    npk_prediction = rf_meta_model.predict(stack_input)\n",
    "\n",
    "    # Return the predicted NPK values (e.g., N, P, K)\n",
    "    return {\n",
    "        'N (Nitrogen)': npk_prediction[0][0],\n",
    "        'P (Phosphorus)': npk_prediction[0][1],\n",
    "        'K (Potassium)': npk_prediction[0][2]\n",
    "    }\n",
    "\n",
    "# Function to accept manual input from the user\n",
    "def get_manual_input():\n",
    "    try:\n",
    "        # Accept manual input for latitude, longitude, and date range\n",
    "        latitude = float(input(\"Enter latitude: \"))\n",
    "        longitude = float(input(\"Enter longitude: \"))\n",
    "        start_date = input(\"Enter start date (YYYY-MM-DD): \")\n",
    "        end_date = input(\"Enter end date (YYYY-MM-DD): \")\n",
    "        \n",
    "        # Get the NPK predictions\n",
    "        npk_values = get_npk_predictions(latitude, longitude, start_date, end_date)\n",
    "        \n",
    "        # Display the predicted NPK values\n",
    "        print(\"Predicted NPK values:\")\n",
    "        print(f\"N (Nitrogen): {npk_values['N (Nitrogen)']}\")\n",
    "        print(f\"P (Phosphorus): {npk_values['P (Phosphorus)']}\")\n",
    "        print(f\"K (Potassium): {npk_values['K (Potassium)']}\")\n",
    "    \n",
    "    except ValueError as e:\n",
    "        print(f\"Error: {e}. Please enter valid numeric values.\")\n",
    "\n",
    "# Run the manual input function\n",
    "get_manual_input()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "9c483c22-3579-4339-b7ef-bc27242cf0e3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
